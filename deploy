#!/bin/bash

#####
# Commands used later
#####
MAINT_MODE=`dirname $0`/maintenance_mode
ECHO="echo -e"
GIT=/usr/bin/git
TAIL=/usr/bin/tail
TAC=/usr/bin/tac
SLEEP=/bin/sleep
TOUCH=/usr/bin/touch
# Rely on the venv to provide these on the path
PIP=pip
PYTHON=python
#####
# End Commands
#####

#####
# Text formatting escape sequences
#####
RESET='\e[0m'

RED='\e[31m'
BLUE='\e[34m'

BOLD='\e[1m'
DIM='\e[2m'
#####
# End Formatting
#####

# Make sure we're in a virtual environment
# TODO: Provide an option to force install sans venv?
if [ -z "$VIRTUAL_ENV" ] ; then
	$ECHO "${RED}No virtual environment active, aborting.$RESET"
	exit 1
fi

VENV=`basename $VIRTUAL_ENV`

$ECHO
$ECHO "Current virtual environment is $BLUE$BOLD$VENV$RESET"
$ECHO "Is this the environment you want to deploy into?"
read -e -p " Type the name of the environment to confirm: " input

if [ "$input" != "$VENV" ] ; then
	$ECHO "${RED}Aborting$RESET"
	exit 2
fi

$ECHO
$ECHO "Starting maintenance mode..."
$MAINT_MODE start
# Let everything "settle"
$SLEEP 2

$ECHO "Updating repository..."
$GIT fetch --all

# Check that we're trying to update to a current tag
TAGS=`$GIT tag | $TAIL -5`
if [[ "$TAGS" =~ "$1" ]] ; then
	# Check out tag
	$GIT checkout --force $1

	# pip requirements
	$PIP install -r requirements.txt

	# Django migrations
	$PYTHON manage.py migrate

	# Django collect static files
	$PYTHON manage.py collectstatic --noinput

	# Touch the vassal file to force uWSGI to reload the code
	$TOUCH vassal.ini
fi

# Let everything "settle"
$SLEEP 3
$ECHO "Ending maintenance mode..."
$MAINT_MODE stop

$ECHO
$ECHO "$BLUE${BOLD}Deployment complete!$RESET"
$ECHO

